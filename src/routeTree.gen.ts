/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as MapComboRouteImport } from './routes/map-combo'
import { Route as DataEditorRouteImport } from './routes/data-editor'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HandlerSplatRouteImport } from './routes/handler.$'

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const MapComboRoute = MapComboRouteImport.update({
  id: '/map-combo',
  path: '/map-combo',
  getParentRoute: () => rootRouteImport,
} as any)
const DataEditorRoute = DataEditorRouteImport.update({
  id: '/data-editor',
  path: '/data-editor',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HandlerSplatRoute = HandlerSplatRouteImport.update({
  id: '/handler/$',
  path: '/handler/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/data-editor': typeof DataEditorRoute
  '/map-combo': typeof MapComboRoute
  '/sign-in': typeof SignInRoute
  '/handler/$': typeof HandlerSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/data-editor': typeof DataEditorRoute
  '/map-combo': typeof MapComboRoute
  '/sign-in': typeof SignInRoute
  '/handler/$': typeof HandlerSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/data-editor': typeof DataEditorRoute
  '/map-combo': typeof MapComboRoute
  '/sign-in': typeof SignInRoute
  '/handler/$': typeof HandlerSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/data-editor' | '/map-combo' | '/sign-in' | '/handler/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/data-editor' | '/map-combo' | '/sign-in' | '/handler/$'
  id:
    | '__root__'
    | '/'
    | '/data-editor'
    | '/map-combo'
    | '/sign-in'
    | '/handler/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DataEditorRoute: typeof DataEditorRoute
  MapComboRoute: typeof MapComboRoute
  SignInRoute: typeof SignInRoute
  HandlerSplatRoute: typeof HandlerSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map-combo': {
      id: '/map-combo'
      path: '/map-combo'
      fullPath: '/map-combo'
      preLoaderRoute: typeof MapComboRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data-editor': {
      id: '/data-editor'
      path: '/data-editor'
      fullPath: '/data-editor'
      preLoaderRoute: typeof DataEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/handler/$': {
      id: '/handler/$'
      path: '/handler/$'
      fullPath: '/handler/$'
      preLoaderRoute: typeof HandlerSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataEditorRoute: DataEditorRoute,
  MapComboRoute: MapComboRoute,
  SignInRoute: SignInRoute,
  HandlerSplatRoute: HandlerSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
